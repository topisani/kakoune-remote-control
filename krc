#!/bin/sh
# kak remote control, reimplementation of alexherbo2's connect.kak

kak_escape() {
    # From https://github.com/alexherbo2/prelude.kak/blob/master/rc/prelude.sh
    # Original implementation by Screwtape https://github.com/mawww/kakoune/issues/3340
    for text do
        printf "'"
        while true; do
            case "$text" in
                *"'"*)
                    head=${text%%"'"*}
                    tail=${text#*"'"}
                    printf "%s''" "$head"
                    text=$tail
                    ;;
                *)
                    printf "%s' " "$text"
                    break
                    ;;
            esac
        done
    done
    printf "\n"
}

ensure_env() {
    # Exit program if $KAKOUNE_SESSION is not set.
    if test "$KAKOUNE_SESSION" = ''; then
        echo 'kak $KAKOUNE_SESSION not set' >&2
        exit
    fi
}

kak_defs() {
    # Run in kak with `eval %sh{ krc kak-defs }` to define :connect.
    echo '
        def connect -override -params 1.. %{
            %arg{1} sh -c %{
                export KAKOUNE_SESSION=$1
                export KAKOUNE_CLIENT=$2
                cd $3
                shift 4
                [ "$1" ] && "$@" || "$SHELL"
            } -- %val{session} %val{client} %sh{pwd} %arg{@}
        }

        def shell -params 1.. -override %{
            nop %sh{
                setsid "$@" < /dev/null > /dev/null 2>&1 &
            }
        }

        def connect-shell -params 1.. -override %{
            connect shell %arg{@}
        }

        def connect-terminal -params .. -override %{
            connect terminal %arg{@}
        }
    '
}

env() {
    # Print the current $KAKOUNE_SESSION and $KAKOUNE_CLIENT to stdout.
    echo session: "$KAKOUNE_SESSION"
    echo client: "$KAKOUNE_CLIENT"
}

raw_send() {
    # Evaluate kak script from stdin in $KAKOUNE_SESSION. Run in $KAKOUNE_CLIENT if set.
    ensure_env
    script=$(mktemp --suffix=-krc-raw_send)
    cat > "$script"
    eval_flags=""
    if [ -n $KAKOUNE_CLIENT ]; then
        eval_flags="-try-client $KAKOUNE_CLIENT"
    fi
    echo "
        try %{eval $eval_flags %sh{cat $script; rm $script}} catch %{
            echo -debug krc: %val{error}
            eval $eval_flags %{echo -markup {Error}krc: %val{error}}
        }
    " | kak -p "$KAKOUNE_SESSION"
}

raw_send_sync() {
    # Evaluate kak script from stdin in $KAKOUNE_SESSION, waiting for completion. Run in $KAKOUNE_CLIENT if set. Any errors are written on stderr.
    d=$(mktemp -d --suffix=-krc-raw_send_sync)
    trap "rm -rf $d" EXIT
    script="$d/script"
    cat > "$script"
    err="$d/err"
    touch "$err"
    fifo="$d/fifo"
    mkfifo "$fifo"
    echo "
        try %{eval %file{$script}
            echo -to-file $fifo done
        } catch %{
            echo -to-file $err %val{error} '\n'
            echo -to-file $fifo done
            fail %val{error}
        }
    " | raw_send
    cat "$fifo" >/dev/null
    cat "$err" >&2
}

send() {
    # Run one kak command in $KAKOUNE_SESSION, in $KAKOUNE_CLIENT if set.
    kak_escape "$@" | raw_send
}

send_fg() {
    # Focus the $KAKOUNE_CLIENT and run one kak command in $KAKOUNE_SESSION.
    { echo focus; kak_escape "$@"; } | raw_send
}

send_sync() {
    # Run one kak command in $KAKOUNE_SESSION (in $KAKOUNE_CLIENT if set) and wait for the result.
    kak_escape "$@" | raw_send_sync
}

get() {
    # Print the echo of arguments in kak $KAKOUNE_SESSION on stdout. Run in $KAKOUNE_CLIENT if set.
    out=$(mktemp --suffix=-krc-get)
    trap "rm -rf $out" EXIT
    touch "$out"
    echo echo -quoting shell -to-file "$out" "$@" | raw_send_sync
    cat "$out" | xargs -n1
}

attach() {
    # Start a new kak client in $KAKOUNE_SESSION.
    ensure_env
    kak -c "$KAKOUNE_SESSION" "$@"
}

attach_with() {
    # Start a new kak client in $KAKOUNE_SESSION, running the argument kak command at startup.
    ensure_env
    script=$(mktemp --suffix=-krc-attach-with)
    kak_escape "$@" > "$script"
    kak -c "$KAKOUNE_SESSION" -e "eval %sh{cat $script; rm $script}"
}

edit() {
    # Edit a file in the linked kakoune client
    ensure_env
    send edit "$@"
}

open() {
    # Edit a file in the linked kakoune client and focus it.
    ensure_env
    send_fg edit "$@"
}

list_subcommands() {
  echo kak-escape
  echo kak-defs
  echo env
  echo raw-send
  echo raw-send-sync
  echo send
  echo send-fg
  echo send-sync
  echo get
  echo attach
  echo attach-with
  echo edit
  echo open
}

if list_subcommands | grep -q "^$1\$"; then
    fn=$(echo $1 | tr - _)
    shift;
    "$fn" "$@"
else
    printf '%s\n' "kakoune-remote-control (krc)"
    printf '%s\n' ""
    printf '%s\n' "Usage:"
    printf '%s\n' "    $(basename "$0") COMMAND [...ARGS]"
    printf '%s\n' ""
    printf '%s\n' "Where COMMAND is one of:"

    self=$(realpath "$0")
    if [ -z "$cols" ]; then
        cols=$(tput cols)
    fi
    list_subcommands | while read cmd; do
        fn=$(echo $cmd | tr - _)
        printf '  %-13s ' "$cmd"
         sed -n "/^$fn() /,/^}/p" "$self" | sed -n 's/^\s\+\#\s\+/\n\t/p' | sed '/./,$!d' | fmt -w $((cols - 16))
        echo
    done | column -s '	' -t
fi
